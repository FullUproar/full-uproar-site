generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String   @unique
  priceCents Int
  imageUrl   String
  stock      Int
  createdAt  DateTime @default(now())
}

model Merch {
  id               Int          @id @default(autoincrement())
  name             String
  slug             String       @unique
  description      String
  category         String
  priceCents       Int
  imageUrl         String?
  sizes            String?
  featured         Boolean      @default(false)
  createdAt        DateTime     @default(now()) @db.Timestamp(6)
  tags             String?
  printifyId       String?
  blueprintId      Int?
  printProviderId  Int?
  variantMapping   String?
  isPrintify       Boolean?     @default(false)
  isNew            Boolean?     @default(false)
  isBestseller     Boolean?     @default(false)
  colors           String?
  material         String?      @db.VarChar(255)
  careInstructions String?
  fitDescription   String?      @db.VarChar(255)
  weight           String?      @db.VarChar(255)
  dimensions       String?      @db.VarChar(255)
  updatedAt        DateTime?    @default(now()) @updatedAt
  apparelType      String?      @db.VarChar(50)
  fit              String?      @db.VarChar(50)
  isLimitedEdition Boolean?     @default(false)
  releaseDate      DateTime?    @db.Timestamp(6)
  inventory        Inventory[]
  images           MerchImage[]
  reviews          Review[]
  orderItems       OrderItem[]
}

model Game {
  id                  Int            @id @default(autoincrement())
  title               String
  tagline             String?
  description         String
  priceCents          Int
  players             String
  timeToPlay          String
  ageRating           String         @db.VarChar(20)
  imageUrl            String?
  isBundle            Boolean        @default(false)
  isPreorder          Boolean        @default(true)
  featured            Boolean        @default(false)
  bundleInfo          String?
  createdAt           DateTime       @default(now())
  stock               Int            @default(0)
  slug                String?
  tags                String?
  category            String?        @default("game") @db.VarChar(10)
  howToPlay           String?
  components          String?
  videoUrl            String?        @db.VarChar(255)
  updatedAt           DateTime       @default(now()) @updatedAt
  launchDate          DateTime?
  isNew               Boolean?       @default(false)
  isBestseller        Boolean?       @default(false)
  playerCountCustom   String?        @db.VarChar(255)
  playTimeCustom      String?        @db.VarChar(255)
  setupTime           String?        @db.VarChar(255)
  difficulty          String?        @db.VarChar(255)
  designer            String?        @db.VarChar(255)
  artist              String?        @db.VarChar(255)
  publisher           String?        @default("Full Uproar Games") @db.VarChar(255)
  releaseYear         Int?
  bggUrl              String?        @db.VarChar(255)
  playerCount         String?        @default("TWO_TO_FOUR") @db.VarChar(20)
  playTime            String?        @default("MEDIUM") @db.VarChar(20)
  whatsInTheBox       String?
  leadDesigner        String?        @db.VarChar(255)
  leadArtist          String?        @db.VarChar(255)
  additionalDesigners String?
  additionalArtists   String?
  launchYear          Int?
  launchMonth         Int?
  launchDay           Int?
  launchHour          Int?
  launchMinute        Int?
  images              GameImage[]
  inventory           GameInventory?
  reviews             Review[]
  orderItems          OrderItem[]
}

model Comic {
  id          Int      @id @default(autoincrement())
  title       String
  episode     String
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
}

model NewsPost {
  id        Int      @id @default(autoincrement())
  title     String
  excerpt   String
  content   String?
  createdAt DateTime @default(now())
}

model EmailSubscriber {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Artwork {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  imageUrl     String
  category     String
  tags         String?
  createdAt    DateTime @default(now())
  largeUrl     String?
  thumbnailUrl String?
  chaosMode    Boolean  @default(false)
}

model Inventory {
  id       Int     @id @default(autoincrement())
  merchId  Int
  size     String?
  quantity Int     @default(0)
  reserved Int     @default(0)
  merch    Merch   @relation(fields: [merchId], references: [id])
}

model GameInventory {
  id       Int  @id @default(autoincrement())
  gameId   Int  @unique
  quantity Int  @default(0)
  reserved Int  @default(0)
  game     Game @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([gameId])
}

model Order {
  id              String               @id @default(cuid())
  customerEmail   String
  customerName    String
  shippingAddress String
  billingAddress  String?
  status          String               @default("pending")
  totalCents      Int
  shippingCents   Int                  @default(0)
  taxCents        Int                  @default(0)
  trackingNumber  String?
  notes           String?
  createdAt       DateTime             @default(now()) @db.Timestamp(6)
  updatedAt       DateTime             @default(now()) @updatedAt @db.Timestamp(6)
  items           OrderItem[]
  statusHistory   OrderStatusHistory[]
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  orderId    String
  itemType   String
  gameId     Int?
  merchId    Int?
  merchSize  String?
  quantity   Int
  priceCents Int
  order      Order   @relation(fields: [orderId], references: [id])
  game       Game?   @relation(fields: [gameId], references: [id])
  merch      Merch?  @relation(fields: [merchId], references: [id])
}

model OrderStatusHistory {
  id        Int      @id @default(autoincrement())
  orderId   String
  status    String
  note      String?
  createdAt DateTime @default(now()) @db.Timestamp(6)
  order     Order    @relation(fields: [orderId], references: [id])
}

model Settings {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @default(now()) @updatedAt

  @@index([key])
}

model GameImage {
  id        Int      @id @default(autoincrement())
  gameId    Int
  imageUrl  String
  alt       String?
  isPrimary Boolean  @default(false)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model MerchImage {
  id        Int      @id @default(autoincrement())
  merchId   Int
  imageUrl  String
  alt       String?
  isPrimary Boolean  @default(false)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  merch     Merch    @relation(fields: [merchId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  gameId    Int?
  merchId   Int?
  userId    String
  userName  String
  rating    Int
  title     String
  comment   String
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  unhelpful Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  game      Game?    @relation(fields: [gameId], references: [id])
  merch     Merch?   @relation(fields: [merchId], references: [id])

  @@index([gameId])
  @@index([merchId])
  @@index([userId])
}

model ProductView {
  id          Int      @id @default(autoincrement())
  productType String
  productId   Int
  userId      String?
  sessionId   String
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@index([productType, productId])
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
}

model UserActivity {
  id         Int      @id @default(autoincrement())
  userId     String
  action     String
  targetType String
  targetId   Int
  metadata   String?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([targetType, targetId])
  @@index([createdAt])
}

enum MerchCategory {
  APPAREL
  ACCESSORIES
  HOME_GOODS
  COLLECTIBLES
  STICKERS
  PRINTS
  OTHER
}

enum ApparelType {
  T_SHIRT
  HOODIE
  TANK_TOP
  LONG_SLEEVE
  SWEATSHIRT
  JACKET
  HAT
  OTHER
}

enum AgeRating {
  ALL_AGES
  ELEVEN_PLUS
  FOURTEEN_PLUS
  SIXTEEN_PLUS
  EIGHTEEN_PLUS
  TWENTYONE_PLUS
}

enum GameCategory {
  GAME
  MOD
  EXPANSION
}

enum PlayerCount {
  SINGLE
  TWO
  TWO_TO_FOUR
  TWO_TO_SIX
  THREE_TO_FIVE
  THREE_TO_SIX
  FOUR_TO_EIGHT
  PARTY
  CUSTOM
}

enum PlayTime {
  QUICK
  SHORT
  MEDIUM
  LONG
  EXTENDED
  VARIABLE
}
