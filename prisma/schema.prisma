generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  slug        String  @unique
  priceCents  Int
  imageUrl    String
  stock       Int
  createdAt   DateTime @default(now())
}

enum MerchCategory {
  APPAREL
  ACCESSORIES
  HOME_GOODS
  COLLECTIBLES
  STICKERS
  PRINTS
  OTHER
}

enum ApparelType {
  T_SHIRT
  HOODIE
  TANK_TOP
  LONG_SLEEVE
  SWEATSHIRT
  HAT
  OTHER
}

model Merch {
  id          Int            @id @default(autoincrement())
  name        String
  slug        String         @unique
  description String         @db.Text
  category    MerchCategory  @default(APPAREL)
  apparelType ApparelType?   // Only for APPAREL category
  priceCents  Int
  
  // Display settings
  imageUrl    String?
  featured    Boolean        @default(false)
  isNew       Boolean        @default(false)
  isBestseller Boolean      @default(false)
  
  // Product details
  sizes       String?        // JSON array for apparel sizes like ["S", "M", "L", "XL"]
  colors      String?        // JSON array of available colors
  material    String?        // e.g., "100% Cotton", "50/50 Blend"
  careInstructions String?   @db.Text
  fitDescription String?     // e.g., "Unisex, runs true to size"
  
  // Additional details
  weight      String?        // Shipping weight
  dimensions  String?        // Product dimensions
  
  // SEO and search
  tags        String?        // JSON array of tags for searching
  
  // Printify integration fields
  printifyId  String?        // Printify product ID
  blueprintId Int?           // Printify blueprint ID (product type)
  printProviderId Int?       // Printify print provider ID
  variantMapping String?     // JSON mapping of our sizes to Printify variant IDs
  isPrintify  Boolean        @default(false) // Whether this is a POD product
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  inventory   Inventory[]
  orderItems  OrderItem[]
  images      MerchImage[]
  reviews     Review[]
}

enum AgeRating {
  ALL_AGES
  ELEVEN_PLUS
  FOURTEEN_PLUS
  SIXTEEN_PLUS
  EIGHTEEN_PLUS
  TWENTYONE_PLUS
}

enum GameCategory {
  GAME
  MOD
  EXPANSION
}

enum PlayerCount {
  SINGLE        // 1 Player
  TWO           // 2 Players
  TWO_TO_FOUR   // 2-4 Players
  TWO_TO_SIX    // 2-6 Players
  THREE_TO_FIVE // 3-5 Players
  THREE_TO_SIX  // 3-6 Players
  FOUR_TO_EIGHT // 4-8 Players
  PARTY         // 6+ Players
  CUSTOM        // Custom range
}

enum PlayTime {
  QUICK        // Under 30 min
  SHORT        // 30-60 min
  MEDIUM       // 60-90 min
  LONG         // 90-120 min
  EXTENDED     // 2+ hours
  VARIABLE     // Varies
}

model Game {
  id          Int           @id @default(autoincrement())
  title       String
  slug        String        @unique
  tagline     String?
  description String        @db.Text
  priceCents  Int
  
  // Enhanced game details with enums
  ageRating   AgeRating     @default(ALL_AGES)
  category    GameCategory  @default(GAME)
  playerCount PlayerCount   @default(TWO_TO_FOUR)
  playTime    PlayTime      @default(MEDIUM)
  
  // Custom values for when enums don't fit
  playerCountCustom String?  // e.g., "2-10 Players"
  playTimeCustom    String?  // e.g., "45-75 minutes"
  
  // Display settings
  imageUrl    String?
  isBundle    Boolean      @default(false)
  isPreorder  Boolean      @default(false)
  featured    Boolean      @default(false)
  isNew       Boolean      @default(false) // Show "NEW" badge
  isBestseller Boolean    @default(false) // Show "BESTSELLER" badge
  bundleInfo  String?      @db.Text
  
  // Game details
  components  String?      @db.Text // What's in the box
  howToPlay   String?      @db.Text // How to play instructions
  setupTime   String?      // e.g., "5 minutes"
  difficulty  String?      // e.g., "Easy to learn, hard to master"
  designer    String?      // Game designer name
  artist      String?      // Game artist name
  publisher   String?      @default("Full Uproar Games")
  releaseYear Int?         // Year of release
  videoUrl    String?      // YouTube embed URL
  bggUrl      String?      // BoardGameGeek URL
  
  // Launch and availability
  launchDate  DateTime?    // When the game launches/launched
  
  // Deprecated - use GameInventory instead
  stock       Int          @default(0) // @deprecated - Use GameInventory
  
  // SEO and search
  tags        String?      // JSON array of tags
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  orderItems  OrderItem[]
  images      GameImage[]
  inventory   GameInventory?
  reviews     Review[]
}

model Comic {
  id          Int      @id @default(autoincrement())
  title       String
  episode     String
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
}

model NewsPost {
  id          Int      @id @default(autoincrement())
  title       String
  excerpt     String
  content     String?
  createdAt   DateTime @default(now())
}

model EmailSubscriber {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  createdAt   DateTime @default(now())
}

model Artwork {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  imageUrl    String   // Medium size (600x600) - main display
  thumbnailUrl String? // 100x100 for admin tables
  largeUrl    String?  // 1200x1200 for hero/backgrounds
  category    String   // 'background', 'character', 'logo', 'decoration', etc.
  tags        String?  // comma-separated tags
  chaosMode   Boolean  @default(false) // Use in chaos mode animations
  createdAt   DateTime @default(now())
}

model Inventory {
  id          Int      @id @default(autoincrement())
  merchId     Int
  size        String?  // For sized items like apparel
  quantity    Int      @default(0)
  reserved    Int      @default(0) // Reserved for pending orders
  
  merch       Merch    @relation(fields: [merchId], references: [id])
  
  @@unique([merchId, size])
}

model GameInventory {
  id          Int      @id @default(autoincrement())
  gameId      Int      @unique
  quantity    Int      @default(0)
  reserved    Int      @default(0) // Reserved for pending orders
  
  game        Game     @relation(fields: [gameId], references: [id])
}

model Order {
  id              String      @id @default(cuid())
  customerEmail   String
  customerName    String
  shippingAddress String
  billingAddress  String?
  status          String      @default("pending") // pending, processing, shipped, delivered, cancelled
  totalCents      Int
  shippingCents   Int         @default(0)
  taxCents        Int         @default(0)
  trackingNumber  String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  items           OrderItem[]
  statusHistory   OrderStatusHistory[]
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     String
  itemType    String   // 'game' or 'merch'
  gameId      Int?
  merchId     Int?
  merchSize   String?  // For sized merch items
  quantity    Int
  priceCents  Int      // Price at time of order
  
  order       Order    @relation(fields: [orderId], references: [id])
  game        Game?    @relation(fields: [gameId], references: [id])
  merch       Merch?   @relation(fields: [merchId], references: [id])
}

model OrderStatusHistory {
  id          Int      @id @default(autoincrement())
  orderId     String
  status      String
  note        String?
  createdAt   DateTime @default(now())
  
  order       Order    @relation(fields: [orderId], references: [id])
}

model Settings {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String   @db.Text // Use Text for potentially long values
  description String?
  updatedAt   DateTime @updatedAt
}

model GameImage {
  id          Int      @id @default(autoincrement())
  gameId      Int
  imageUrl    String
  alt         String?
  isPrimary   Boolean  @default(false)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  
  game        Game     @relation(fields: [gameId], references: [id])
}

model MerchImage {
  id          Int      @id @default(autoincrement())
  merchId     Int
  imageUrl    String
  alt         String?
  isPrimary   Boolean  @default(false)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  
  merch       Merch    @relation(fields: [merchId], references: [id])
}

model Review {
  id          Int      @id @default(autoincrement())
  gameId      Int?
  merchId     Int?
  userId      String   // Clerk user ID
  userName    String
  rating      Int      // 1-5 stars
  title       String
  comment     String
  verified    Boolean  @default(false) // Verified purchase
  helpful     Int      @default(0) // Helpful votes
  unhelpful   Int      @default(0) // Not helpful votes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  game        Game?    @relation(fields: [gameId], references: [id])
  merch       Merch?   @relation(fields: [merchId], references: [id])
  
  @@index([gameId])
  @@index([merchId])
  @@index([userId])
}

model ProductView {
  id          Int      @id @default(autoincrement())
  productType String   // 'game' or 'merch'
  productId   Int
  userId      String?  // Clerk user ID (null for anonymous)
  sessionId   String   // For anonymous tracking
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  @@index([productType, productId])
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
}

model UserActivity {
  id          Int      @id @default(autoincrement())
  userId      String   // Clerk user ID
  action      String   // 'view', 'add_to_cart', 'purchase', 'review'
  targetType  String   // 'game', 'merch'
  targetId    Int
  metadata    String?  // JSON for extra data
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([targetType, targetId])
  @@index([createdAt])
}